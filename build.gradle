buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
  }
}

plugins { 
	id "com.github.johnrengelman.shadow" version "2.0.4"
}

subprojects {

apply plugin: "java"
apply plugin: "idea"

sourceCompatibility = 1.8 // java 8
targetCompatibility = 1.8

description = "JBotSim : a simulation library for distributed algorithms in dynamic networks."
group = "com.github.acasteigts"
version = '1.0-alpha26-SNAPSHOT'

repositories {
    jcenter()
}

configurations{
	jbotsimCoreCompile
	jbotsimCompile
}

dependencies{
	testImplementation "junit:junit:4+"
}



task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        flatDir {
            name 'fileRepo'
            def releasesRepoUrl = rootProject.file("repos/releases")
            def snapshotsRepoUrl = rootProject.file("repos/snapshots")
            def repoUrl = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            dirs "$repoUrl"
        }
    }

}
}

project(':jbotsim') {
    processResources {
      from("src/main/java") {into "jbotsim"}
      excludes = ["**/*.java"]
	}
	
	jar{
	  baseName = "jbotsim-core"
    }
}

project(':jbotsimx') {

    apply plugin: "com.github.johnrengelman.shadow"

    dependencies {
        compile project(':jbotsim'), 'guru.nidi:graphviz-java:0.5+'
    }

    processResources {
      from("src/main/java") {into "jbotsimx"}
      excludes = ["**/*.java"]
	}
	
    shadowJar{
	  baseName = "jbotsim"
	}
	build.dependsOn(shadowJar);
}


project(':examples'){

    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "application"
    applicationName = "jbotsim-examples"
    mainClassName = "examples.basic.helloworld.Main"

    dependencies {
        compile project(':jbotsim'), project(':jbotsimx'), 'guru.nidi:graphviz-java:0.5+'
    }
    
    processResources {
      from("src/main/java") {into "examples"}
      excludes = ["**/*.java"]
	}
	
	jar{
	  baseName = "jbotsim-examples"
    }
    
    shadowJar{
	  baseName = "jbotsim-full"
	}
	build.dependsOn(shadowJar);
	//Create a run task for each example in the examples directory:

	task createAllExamplesScripts(group: "Application", description: "Create the examples binaries as scripts.") << {
	}

	def scripts = [:]
	def srcDirectoryPath = "${projectDir}" + File.separator + "src" + File.separator + "main" + File.separator + "java" + File.separator
	println(srcDirectoryPath)
  	fileTree(srcDirectoryPath).visit{
    details -> 
    if(details.file.isFile()){
      if(details.file.text.contains("public static void main(")){
         def name = details.file.getName().substring(0, details.file.getName().lastIndexOf('.'))
         def relativePath = details.file.getPath()
         relativePath = relativePath.replace(srcDirectoryPath, '').replace(File.separator, '.').replace('.java', '')
         scripts.put(name, "examples." + relativePath)
        }
      }
    }


  scripts.each() { scriptName, className ->
    def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
      mainClassName = className
      applicationName = scriptName
      outputDir = new File(project.buildDir, 'scripts')
      classpath = jar.outputs.files + project.configurations.runtime
    }
    createAllExamplesScripts.dependsOn(t)
    def r = tasks.create(name: 'run' + scriptName.substring(0, 1).toUpperCase() + scriptName.substring(1),
     type: JavaExec, group: "Application", description: "Run " + scriptName + " example.") {
      classpath sourceSets.main.runtimeClasspath
      main = className
    }
    r.dependsOn(t)
  }
}



apply plugin: "java"
apply plugin: "application"

version = '1.0-alpha26'
group = "com.github.acasteigts"
sourceCompatibility = 1.8 // java 8
targetCompatibility = 1.8
applicationName = "jbotsimAll"
mainClassName = "examples.basic.helloworld.Main"
description = "JBotSim : a simulation library for distributed algorithms in dynamic networks."

// to prevent errors with french comments
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = [ "src/jbotsim", "src/jbotsimx", "src/examples" ]
        }
        resources {
            srcDirs = main.java.srcDirs
        }
    }

    jbotsimCore {
        java {
            srcDirs = main.java.srcDirs
            include "jbotsim/**/*.java"
        }
        resources {
            srcDirs = main.resources.srcDirs
            include "jbotsim/**/*"
        }
    }

    jbotsim {
        java {
            srcDirs = main.java.srcDirs
            exclude "examples/**/*.java"
        }
        resources {
            srcDirs = main.resources.srcDirs
            exclude "examples/**/*"
        }
    }

    test {
        java {
            srcDirs = [ "test/java"]
        }
        resources {
            srcDirs = [ "test/resources" ]
        }
    }
}

task jbotsimCoreJar(type: Jar){
    baseName = "jbotsim-core"
	from sourceSets.jbotsimCore.output
}

task jbotsimJar(type: Jar){
	baseName = "jbotsim"
	from sourceSets.jbotsim.output
}

jar{
	baseName = "jbotsim-all"
	from sourceSets.main.output
}

jar.finalizedBy jbotsimCoreJar
jar.finalizedBy jbotsimJar

task jbotsimCoreDoc(type: Javadoc) {
  source = sourceSets.jbotsimCore.allJava
  destinationDir = file("$buildDir/docs/jbotsim-core")
}

task jbotsimDoc(type: Javadoc) {
  source = sourceSets.jbotsim.allJava
  destinationDir = file("$buildDir/docs/jbotsim")
}

javadoc.finalizedBy jbotsimCoreDoc
javadoc.finalizedBy jbotsimDoc

//Create a binary for each example :

task createAllStartScripts() << {
     // just a placeholder
}
  def scripts = [:]
  fileTree("${project.rootDir}" + File.separator + "src" + File.separator + "examples" + File.separator + "basic").visit{
    details -> if(details.isDirectory()){
      scripts.put(details.file.getName(), "examples.basic." + details.file.getName() + ".Main")
    }
  }
  scripts.each() { scriptName, className ->
          def t = tasks.create(name: scriptName+'StartScript', type: CreateStartScripts) {
        mainClassName = className
        applicationName = scriptName
        outputDir = new File(project.buildDir, 'scripts')
        classpath = jar.outputs.files + project.configurations.runtime
    }
    createAllStartScripts.dependsOn(t)
  }

/**
 * Tests
 */

// Non-standard location of tests
sourceSets {
    test {
    }

    jbotsimJarTest {
        java.srcDirs = test.java.srcDirs
        resources.srcDirs = test.resources.srcDirs
        compileClasspath += jbotsimJar.outputs.files
        runtimeClasspath += jbotsimJar.outputs.files
    }

}

dependencies {
    testImplementation 'junit:junit:4.12'
    jbotsimJarTestImplementation 'junit:junit:4.12'
}

configurations {
    jbotsimJarTestImplementation.extendsFrom implementation
    jbotsimJarTestRuntimeOnly.extendsFrom runtimeOnly
}

def commonTestSettings = {
    useJUnit ()
    testLogging {
        warn {
            events = [ "passed", "failed", "skipped" ]
            showCauses = true
            showStackTraces = true
            showExceptions = true
            exceptionFormat = "full"
        }
    }

    filter {
        includeTestsMatching "*"
    }

    doLast {
        String outDirName = rootDir.toPath().relativize(project.testReportDir.toPath()).toString()
        println ()
        println ("View test report in: " + outDirName +  File.separator + name + File.separator + "index.html")
    }
}

test {
    configure commonTestSettings
}

task jbotsimJarTest (type : Test) {
    configure commonTestSettings
    testClassesDirs = sourceSets.jbotsimJarTest.output.classesDirs
    classpath = sourceSets.jbotsimJarTest.runtimeClasspath
    shouldRunAfter test

    println(classpath.files)
}


check.dependsOn jbotsimJarTest